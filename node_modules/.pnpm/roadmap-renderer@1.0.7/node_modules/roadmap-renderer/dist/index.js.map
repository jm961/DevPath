{"version":3,"sources":["../src/index.ts","../src/utils.ts","../src/constants.ts","../src/renderer.ts"],"sourcesContent":["import { Renderer } from './renderer';\nimport { makeSVGElement } from './utils';\n\n/**\n * @param {Object} wireframe - Wireframe JSON\n * @param {Object} options - Config object\n * @param {number} [options.padding=5] - Padding for the SVG element\n * @param {string} [options.fontFamily=balsamiq]\n * @param {string} [options.fontURL=https://fonts.gstatic.com/s/balsamiqsans/v3/P5sEzZiAbNrN8SB3lQQX7Pncwd4XIA.woff2]\n * @returns {Promise} Resolves SVG element\n */\nexport async function wireframeJSONToSVG(\n  wireframe: any,\n  options: { padding?: number; fontFamily?: string; fontURL?: string } = {}\n) {\n  options = {\n    padding: 5,\n    fontFamily: 'balsamiq',\n    fontURL:\n      'https://fonts.gstatic.com/s/balsamiqsans/v3/P5sEzZiAbNrN8SB3lQQX7Pncwd4XIA.woff2', // fontURL: '/fonts/balsamiq.woff2',\n    ...options,\n  };\n\n  if (options.fontURL) {\n    let font = new FontFace(options.fontFamily!, `url(${options.fontURL})`);\n    await font.load();\n\n    if ((document.fonts as any).add) {\n      (document.fonts as any).add(font);\n    }\n  }\n\n  let mockup = wireframe.mockup;\n\n  let x = mockup.measuredW - mockup.mockupW - options.padding!;\n  let y = mockup.measuredH - mockup.mockupH - options.padding!;\n  let width = parseInt(mockup.mockupW) + options.padding! * 2;\n  let height = parseInt(mockup.mockupH) + options.padding! * 2;\n\n  let svgRoot = makeSVGElement('svg', {\n    xmlns: 'http://www.w3.org/2000/svg',\n    'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n    viewBox: `${x} ${y} ${width} ${height}`,\n    style: 'font-family: balsamiq',\n  });\n\n  let renderer = new Renderer(svgRoot, options.fontFamily!);\n\n  mockup.controls.control\n    .sort((a: any, b: any) => {\n      return a.zOrder - b.zOrder;\n    })\n    .forEach((control: any) => {\n      renderer.render(control, svgRoot);\n    });\n\n  return svgRoot;\n}\n","export function getRGBFromDecimalColor(color: number) {\n  let red = (color >> 16) & 0xff;\n  let green = (color >> 8) & 0xff;\n  let blue = color & 0xff;\n  return `rgb(${red},${green},${blue})`;\n}\n\nexport function makeSVGElement(\n  type: string,\n  attributes: Record<string, any> = {},\n  parent?: any\n): SVGElement {\n  let element = document.createElementNS('http://www.w3.org/2000/svg', type);\n\n  for (let prop in attributes) {\n    if (!attributes.hasOwnProperty(prop)) {\n      continue;\n    }\n\n    element.setAttribute(prop, attributes[prop]);\n  }\n\n  if (parent) {\n    parent.appendChild(element);\n  }\n\n  return element;\n}\n","export const FONT_SIZE = '13px';\nexport const BORDER_WIDTH = 2.7;\nexport const ARROW_WIDTH = 4;\nexport const RECT_RADIUS = 2;\n\nexport const DEFAULT_COLORS: Record<string, any> = {\n  black: ['#000'],\n  gray: ['#000', '#333', '#666', '#999', '#ccc', '#ddd', '#eee'],\n  white: ['#fff'],\n  red: ['#cf2a27', '#ea9999', '#eo6666', '#cc0000', '#990000', '#660000'],\n  orange: ['#ff9900', '#f9cb9c', '#f6b26b', '#e69138', '#b45f06', '#783f04'],\n  yellow: ['#ffff00', '#ffe599', '#ffd966', '#f1c232', '#bf9000', '#7f6000'],\n  green: ['#009e0f', '#b6d7a8', '#93c47d', '#6aa84f', '#38761d', '#274e13'],\n  cyan: ['#00ffff', '#a2c4c9', '#76a5af', '#45818e', '#134f5c', '#0c343d'],\n  blue: ['#2b78e4', '#9fc5f8', '#6fa8dc', '#597eaa', '#085394', '#073763'],\n  purple: ['#9900ff', '#b4a7d6', '#8e7cc3', '#674ea7', '#351c75', '#20124d'],\n  pink: ['#ff00ff', '#d5a6bd', '#c27ba0', '#a64d79', '#741b47', '#4c1130'],\n};\n","import { getRGBFromDecimalColor, makeSVGElement } from './utils';\nimport {\n  ARROW_WIDTH,\n  BORDER_WIDTH,\n  DEFAULT_COLORS,\n  RECT_RADIUS,\n} from './constants';\n\nexport class Renderer {\n  private svgRoot: SVGElement;\n  private readonly fontFamily: string;\n  private canvasRenderingContext2D: CanvasRenderingContext2D;\n\n  constructor(svgRoot: SVGElement, fontFamily: string) {\n    this.svgRoot = svgRoot;\n    this.fontFamily = fontFamily;\n    this.canvasRenderingContext2D = document\n      .createElement('canvas')\n      .getContext('2d')!;\n  }\n\n  render(control: any, container: any) {\n    let typeID = control.typeID;\n    if (typeID in this) {\n      (this as any)[typeID](control, container);\n    } else {\n      console.log(`'${typeID}' control type not implemented`);\n    }\n  }\n\n  parseColor(color: any, defaultColor: any) {\n    return color === undefined\n      ? `rgb(${defaultColor})`\n      : getRGBFromDecimalColor(color);\n  }\n\n  parseFontProperties(control: any) {\n    return {\n      style: control.properties?.italic ? 'italic' : 'normal',\n      weight: control.properties?.bold ? 'bold' : 'normal',\n      size: control.properties?.size ? control.properties.size + 'px' : '13px',\n      family: this.fontFamily,\n    };\n  }\n\n  measureText(text: string, font: string) {\n    this.canvasRenderingContext2D.font = font;\n\n    return this.canvasRenderingContext2D.measureText(text);\n  }\n\n  drawRectangle(control: any, container: HTMLElement | undefined) {\n    makeSVGElement(\n      'rect',\n      {\n        x: parseInt(control.x) + BORDER_WIDTH / 2,\n        y: parseInt(control.y) + BORDER_WIDTH / 2,\n        width: parseInt(control.w ?? control.measuredW) - BORDER_WIDTH,\n        height: parseInt(control.h ?? control.measuredH) - BORDER_WIDTH,\n        rx: RECT_RADIUS,\n        fill: this.parseColor(control.properties?.color, '255,255,255'),\n        'fill-opacity': control.properties?.backgroundAlpha ?? 1,\n        stroke: this.parseColor(control.properties?.borderColor, '0,0,0'),\n        'stroke-width': BORDER_WIDTH,\n      },\n      container\n    );\n  }\n\n  addText(\n    control: {\n      properties: { text: string };\n      x: string;\n      y: string;\n      w: any;\n      measuredW: any;\n      measuredH: number;\n    },\n    container: HTMLElement | undefined,\n    textColor: string,\n    align: string\n  ) {\n    let text = control.properties.text ?? '';\n    let x = parseInt(control.x);\n    let y = parseInt(control.y);\n\n    let font = this.parseFontProperties(control);\n    let textMetrics = this.measureText(\n      text,\n      `${font.style} ${font.weight} ${font.size} ${font.family}`\n    );\n\n    let textX =\n      align === 'center'\n        ? x + (control.w ?? control.measuredW) / 2 - textMetrics.width / 2\n        : x;\n    let textY =\n      y + control.measuredH / 2 + textMetrics.actualBoundingBoxAscent / 2;\n\n    let textElement = makeSVGElement(\n      'text',\n      {\n        x: textX,\n        y: textY,\n        fill: textColor,\n        'font-style': font.style,\n        'font-weight': font.weight,\n        'font-size': font.size,\n      },\n      container\n    );\n\n    if (!text.includes('{color:')) {\n      let tspan = makeSVGElement('tspan', {}, textElement);\n      tspan.textContent = text;\n\n      return;\n    }\n\n    let split = text.split(/{color:|{color}/);\n    split.forEach((str) => {\n      if (str.includes('}')) {\n        let [color, textPart] = str.split('}');\n\n        if (!color.startsWith('#')) {\n          let index = parseInt(color.slice(-1));\n          color = isNaN(index)\n            ? DEFAULT_COLORS[color][0]\n            : DEFAULT_COLORS[color][index];\n        }\n\n        let tspan = makeSVGElement('tspan', { fill: color }, textElement);\n        tspan.textContent = textPart;\n      } else {\n        let tspan = makeSVGElement('tspan', {}, textElement);\n        tspan.textContent = str;\n      }\n    });\n  }\n\n  TextArea(control: any, container: HTMLElement | undefined) {\n    this.drawRectangle(control, container);\n  }\n\n  Canvas(control: any, container: HTMLElement | undefined) {\n    this.drawRectangle(control, container);\n  }\n\n  Label(control: any, container: HTMLElement | undefined) {\n    this.addText(\n      control,\n      container,\n      this.parseColor(control.properties?.color, '0,0,0'),\n      'left'\n    );\n  }\n\n  TextInput(control: any, container: any) {\n    this.drawRectangle(control, container);\n\n    this.addText(\n      control,\n      container,\n      this.parseColor(control.properties?.textColor, '0,0,0'),\n      'center'\n    );\n  }\n\n  Arrow(control: any, container: any) {\n    let x = parseInt(control.x);\n    let y = parseInt(control.y);\n    let { p0, p1, p2 } = control.properties;\n\n    let lineDash;\n    if (control.properties?.stroke === 'dotted') lineDash = '0.8 12';\n    else if (control.properties?.stroke === 'dashed') lineDash = '28 46';\n\n    let xVector = { x: (p2.x - p0.x) * p1.x, y: (p2.y - p0.y) * p1.x };\n\n    makeSVGElement(\n      'path',\n      {\n        d: `M${x + p0.x} ${y + p0.y}Q${\n          x + p0.x + xVector.x + xVector.y * p1.y * 3.6\n        } ${y + p0.y + xVector.y + -xVector.x * p1.y * 3.6} ${x + p2.x} ${\n          y + p2.y\n        }`,\n        fill: 'none',\n        stroke: this.parseColor(control.properties?.color, '0,0,0'),\n        'stroke-width': ARROW_WIDTH,\n        'stroke-linecap': 'round',\n        'stroke-linejoin': 'round',\n        'stroke-dasharray': lineDash,\n      },\n      container\n    );\n  }\n\n  Icon(control: any, container: any) {\n    let x = parseInt(control.x);\n    let y = parseInt(control.y);\n    let radius = 10;\n\n    makeSVGElement(\n      'circle',\n      {\n        cx: x + radius,\n        cy: y + radius,\n        r: radius,\n        fill: this.parseColor(control.properties?.color, '0,0,0'),\n      },\n      container\n    );\n\n    if (control.properties.icon.ID !== 'check-circle') {\n      return;\n    }\n\n    makeSVGElement(\n      'path',\n      {\n        d: `M${x + 4.5} ${y + radius}L${x + 8.5} ${y + radius + 4} ${x + 15} ${\n          y + radius - 2.5\n        }`,\n        fill: 'none',\n        stroke: '#fff',\n        'stroke-width': 3.5,\n        'stroke-linecap': 'round',\n        'stroke-linejoin': 'round',\n      },\n      container\n    );\n  }\n\n  HRule(control: any, container: any) {\n    let x = parseInt(control.x);\n    let y = parseInt(control.y);\n\n    let lineDash;\n    if (control.properties?.stroke === 'dotted') lineDash = '0.8, 8';\n    else if (control.properties?.stroke === 'dashed') lineDash = '18, 30';\n\n    makeSVGElement(\n      'path',\n      {\n        d: `M${x} ${y}L${x + parseInt(control.w ?? control.measuredW)} ${y}`,\n        fill: 'none',\n        stroke: this.parseColor(control.properties?.color, '0,0,0'),\n        'stroke-width': BORDER_WIDTH,\n        'stroke-linecap': 'round',\n        'stroke-linejoin': 'round',\n        'stroke-dasharray': lineDash,\n      },\n      container\n    );\n  }\n\n  __group__(control: any, container: any) {\n    const controlName = control?.properties?.controlName || '';\n    let group = makeSVGElement(\n      'g',\n      {\n        ...(controlName\n          ? {\n              class: `clickable-group`,\n              'data-group-id': controlName,\n            }\n          : {}),\n      },\n      container\n    );\n\n    control.children.controls.control\n      .sort((a: any, b: any) => {\n        return a.zOrder - b.zOrder;\n      })\n      .forEach((childControl: any) => {\n        childControl.x = parseInt(childControl.x, 10) + parseInt(control.x, 10);\n        childControl.y = parseInt(childControl.y, 10) + parseInt(control.y, 10);\n\n        this.render(childControl, group);\n      });\n  }\n}\n"],"mappings":"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","names":["index_exports","__export","wireframeJSONToSVG","__toCommonJS","getRGBFromDecimalColor","color","red","green","blue","makeSVGElement","type","attributes","parent","element","prop","DEFAULT_COLORS","Renderer","svgRoot","fontFamily","control","container","typeID","color","defaultColor","getRGBFromDecimalColor","text","font","makeSVGElement","textColor","align","x","y","textMetrics","textX","textY","textElement","tspan","str","textPart","index","DEFAULT_COLORS","p0","p1","p2","lineDash","xVector","radius","controlName","group","a","b","childControl","wireframeJSONToSVG","wireframe","options","font","mockup","x","y","width","height","svgRoot","makeSVGElement","renderer","Renderer","a","b","control"]}