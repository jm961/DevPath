import {
  G,
  _
} from "./chunk-UPXDJGVC.js";

// node_modules/.pnpm/@astrojs+preact@2.2.2_preact@10.27.2/node_modules/@astrojs/preact/dist/static-html.js
var StaticHtml = ({ value, name, hydrate = true }) => {
  if (!value)
    return null;
  const tagName = hydrate ? "astro-slot" : "astro-static-slot";
  return _(tagName, { name, dangerouslySetInnerHTML: { __html: value } });
};
StaticHtml.shouldComponentUpdate = () => false;
var static_html_default = StaticHtml;

// node_modules/.pnpm/@astrojs+preact@2.2.2_preact@10.27.2/node_modules/@astrojs/preact/dist/client.js
var sharedSignalMap = /* @__PURE__ */ new Map();
var client_default = (element) => async (Component, props, { default: children, ...slotted }) => {
  if (!element.hasAttribute("ssr"))
    return;
  for (const [key, value] of Object.entries(slotted)) {
    props[key] = _(static_html_default, { value, name: key });
  }
  let signalsRaw = element.dataset.preactSignals;
  if (signalsRaw) {
    const { signal } = await import("./signals.module-5M56XVIH.js");
    let signals = JSON.parse(element.dataset.preactSignals);
    for (const [propName, signalId] of Object.entries(signals)) {
      if (!sharedSignalMap.has(signalId)) {
        const signalValue = signal(props[propName]);
        sharedSignalMap.set(signalId, signalValue);
      }
      props[propName] = sharedSignalMap.get(signalId);
    }
  }
  function Wrapper({ children: children2 }) {
    let attrs = Object.fromEntries(
      Array.from(element.attributes).map((attr) => [attr.name, attr.value])
    );
    return _(element.localName, attrs, children2);
  }
  let parent = element.parentNode;
  G(
    _(
      Wrapper,
      null,
      _(Component, props, children != null ? _(static_html_default, { value: children }) : children)
    ),
    parent,
    element
  );
};

export {
  client_default
};
//# sourceMappingURL=chunk-AD22LVQ7.js.map
