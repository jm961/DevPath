{
  "version": 3,
  "sources": ["../../.pnpm/roadmap-renderer@1.0.7/node_modules/roadmap-renderer/src/utils.ts", "../../.pnpm/roadmap-renderer@1.0.7/node_modules/roadmap-renderer/src/constants.ts", "../../.pnpm/roadmap-renderer@1.0.7/node_modules/roadmap-renderer/src/renderer.ts", "../../.pnpm/roadmap-renderer@1.0.7/node_modules/roadmap-renderer/src/index.ts"],
  "sourcesContent": ["export function getRGBFromDecimalColor(color: number) {\n  let red = (color >> 16) & 0xff;\n  let green = (color >> 8) & 0xff;\n  let blue = color & 0xff;\n  return `rgb(${red},${green},${blue})`;\n}\n\nexport function makeSVGElement(\n  type: string,\n  attributes: Record<string, any> = {},\n  parent?: any\n): SVGElement {\n  let element = document.createElementNS('http://www.w3.org/2000/svg', type);\n\n  for (let prop in attributes) {\n    if (!attributes.hasOwnProperty(prop)) {\n      continue;\n    }\n\n    element.setAttribute(prop, attributes[prop]);\n  }\n\n  if (parent) {\n    parent.appendChild(element);\n  }\n\n  return element;\n}\n", "export const FONT_SIZE = '13px';\nexport const BORDER_WIDTH = 2.7;\nexport const ARROW_WIDTH = 4;\nexport const RECT_RADIUS = 2;\n\nexport const DEFAULT_COLORS: Record<string, any> = {\n  black: ['#000'],\n  gray: ['#000', '#333', '#666', '#999', '#ccc', '#ddd', '#eee'],\n  white: ['#fff'],\n  red: ['#cf2a27', '#ea9999', '#eo6666', '#cc0000', '#990000', '#660000'],\n  orange: ['#ff9900', '#f9cb9c', '#f6b26b', '#e69138', '#b45f06', '#783f04'],\n  yellow: ['#ffff00', '#ffe599', '#ffd966', '#f1c232', '#bf9000', '#7f6000'],\n  green: ['#009e0f', '#b6d7a8', '#93c47d', '#6aa84f', '#38761d', '#274e13'],\n  cyan: ['#00ffff', '#a2c4c9', '#76a5af', '#45818e', '#134f5c', '#0c343d'],\n  blue: ['#2b78e4', '#9fc5f8', '#6fa8dc', '#597eaa', '#085394', '#073763'],\n  purple: ['#9900ff', '#b4a7d6', '#8e7cc3', '#674ea7', '#351c75', '#20124d'],\n  pink: ['#ff00ff', '#d5a6bd', '#c27ba0', '#a64d79', '#741b47', '#4c1130'],\n};\n", "import { getRGBFromDecimalColor, makeSVGElement } from './utils';\nimport {\n  ARROW_WIDTH,\n  BORDER_WIDTH,\n  DEFAULT_COLORS,\n  RECT_RADIUS,\n} from './constants';\n\nexport class Renderer {\n  private svgRoot: SVGElement;\n  private readonly fontFamily: string;\n  private canvasRenderingContext2D: CanvasRenderingContext2D;\n\n  constructor(svgRoot: SVGElement, fontFamily: string) {\n    this.svgRoot = svgRoot;\n    this.fontFamily = fontFamily;\n    this.canvasRenderingContext2D = document\n      .createElement('canvas')\n      .getContext('2d')!;\n  }\n\n  render(control: any, container: any) {\n    let typeID = control.typeID;\n    if (typeID in this) {\n      (this as any)[typeID](control, container);\n    } else {\n      console.log(`'${typeID}' control type not implemented`);\n    }\n  }\n\n  parseColor(color: any, defaultColor: any) {\n    return color === undefined\n      ? `rgb(${defaultColor})`\n      : getRGBFromDecimalColor(color);\n  }\n\n  parseFontProperties(control: any) {\n    return {\n      style: control.properties?.italic ? 'italic' : 'normal',\n      weight: control.properties?.bold ? 'bold' : 'normal',\n      size: control.properties?.size ? control.properties.size + 'px' : '13px',\n      family: this.fontFamily,\n    };\n  }\n\n  measureText(text: string, font: string) {\n    this.canvasRenderingContext2D.font = font;\n\n    return this.canvasRenderingContext2D.measureText(text);\n  }\n\n  drawRectangle(control: any, container: HTMLElement | undefined) {\n    makeSVGElement(\n      'rect',\n      {\n        x: parseInt(control.x) + BORDER_WIDTH / 2,\n        y: parseInt(control.y) + BORDER_WIDTH / 2,\n        width: parseInt(control.w ?? control.measuredW) - BORDER_WIDTH,\n        height: parseInt(control.h ?? control.measuredH) - BORDER_WIDTH,\n        rx: RECT_RADIUS,\n        fill: this.parseColor(control.properties?.color, '255,255,255'),\n        'fill-opacity': control.properties?.backgroundAlpha ?? 1,\n        stroke: this.parseColor(control.properties?.borderColor, '0,0,0'),\n        'stroke-width': BORDER_WIDTH,\n      },\n      container\n    );\n  }\n\n  addText(\n    control: {\n      properties: { text: string };\n      x: string;\n      y: string;\n      w: any;\n      measuredW: any;\n      measuredH: number;\n    },\n    container: HTMLElement | undefined,\n    textColor: string,\n    align: string\n  ) {\n    let text = control.properties.text ?? '';\n    let x = parseInt(control.x);\n    let y = parseInt(control.y);\n\n    let font = this.parseFontProperties(control);\n    let textMetrics = this.measureText(\n      text,\n      `${font.style} ${font.weight} ${font.size} ${font.family}`\n    );\n\n    let textX =\n      align === 'center'\n        ? x + (control.w ?? control.measuredW) / 2 - textMetrics.width / 2\n        : x;\n    let textY =\n      y + control.measuredH / 2 + textMetrics.actualBoundingBoxAscent / 2;\n\n    let textElement = makeSVGElement(\n      'text',\n      {\n        x: textX,\n        y: textY,\n        fill: textColor,\n        'font-style': font.style,\n        'font-weight': font.weight,\n        'font-size': font.size,\n      },\n      container\n    );\n\n    if (!text.includes('{color:')) {\n      let tspan = makeSVGElement('tspan', {}, textElement);\n      tspan.textContent = text;\n\n      return;\n    }\n\n    let split = text.split(/{color:|{color}/);\n    split.forEach((str) => {\n      if (str.includes('}')) {\n        let [color, textPart] = str.split('}');\n\n        if (!color.startsWith('#')) {\n          let index = parseInt(color.slice(-1));\n          color = isNaN(index)\n            ? DEFAULT_COLORS[color][0]\n            : DEFAULT_COLORS[color][index];\n        }\n\n        let tspan = makeSVGElement('tspan', { fill: color }, textElement);\n        tspan.textContent = textPart;\n      } else {\n        let tspan = makeSVGElement('tspan', {}, textElement);\n        tspan.textContent = str;\n      }\n    });\n  }\n\n  TextArea(control: any, container: HTMLElement | undefined) {\n    this.drawRectangle(control, container);\n  }\n\n  Canvas(control: any, container: HTMLElement | undefined) {\n    this.drawRectangle(control, container);\n  }\n\n  Label(control: any, container: HTMLElement | undefined) {\n    this.addText(\n      control,\n      container,\n      this.parseColor(control.properties?.color, '0,0,0'),\n      'left'\n    );\n  }\n\n  TextInput(control: any, container: any) {\n    this.drawRectangle(control, container);\n\n    this.addText(\n      control,\n      container,\n      this.parseColor(control.properties?.textColor, '0,0,0'),\n      'center'\n    );\n  }\n\n  Arrow(control: any, container: any) {\n    let x = parseInt(control.x);\n    let y = parseInt(control.y);\n    let { p0, p1, p2 } = control.properties;\n\n    let lineDash;\n    if (control.properties?.stroke === 'dotted') lineDash = '0.8 12';\n    else if (control.properties?.stroke === 'dashed') lineDash = '28 46';\n\n    let xVector = { x: (p2.x - p0.x) * p1.x, y: (p2.y - p0.y) * p1.x };\n\n    makeSVGElement(\n      'path',\n      {\n        d: `M${x + p0.x} ${y + p0.y}Q${\n          x + p0.x + xVector.x + xVector.y * p1.y * 3.6\n        } ${y + p0.y + xVector.y + -xVector.x * p1.y * 3.6} ${x + p2.x} ${\n          y + p2.y\n        }`,\n        fill: 'none',\n        stroke: this.parseColor(control.properties?.color, '0,0,0'),\n        'stroke-width': ARROW_WIDTH,\n        'stroke-linecap': 'round',\n        'stroke-linejoin': 'round',\n        'stroke-dasharray': lineDash,\n      },\n      container\n    );\n  }\n\n  Icon(control: any, container: any) {\n    let x = parseInt(control.x);\n    let y = parseInt(control.y);\n    let radius = 10;\n\n    makeSVGElement(\n      'circle',\n      {\n        cx: x + radius,\n        cy: y + radius,\n        r: radius,\n        fill: this.parseColor(control.properties?.color, '0,0,0'),\n      },\n      container\n    );\n\n    if (control.properties.icon.ID !== 'check-circle') {\n      return;\n    }\n\n    makeSVGElement(\n      'path',\n      {\n        d: `M${x + 4.5} ${y + radius}L${x + 8.5} ${y + radius + 4} ${x + 15} ${\n          y + radius - 2.5\n        }`,\n        fill: 'none',\n        stroke: '#fff',\n        'stroke-width': 3.5,\n        'stroke-linecap': 'round',\n        'stroke-linejoin': 'round',\n      },\n      container\n    );\n  }\n\n  HRule(control: any, container: any) {\n    let x = parseInt(control.x);\n    let y = parseInt(control.y);\n\n    let lineDash;\n    if (control.properties?.stroke === 'dotted') lineDash = '0.8, 8';\n    else if (control.properties?.stroke === 'dashed') lineDash = '18, 30';\n\n    makeSVGElement(\n      'path',\n      {\n        d: `M${x} ${y}L${x + parseInt(control.w ?? control.measuredW)} ${y}`,\n        fill: 'none',\n        stroke: this.parseColor(control.properties?.color, '0,0,0'),\n        'stroke-width': BORDER_WIDTH,\n        'stroke-linecap': 'round',\n        'stroke-linejoin': 'round',\n        'stroke-dasharray': lineDash,\n      },\n      container\n    );\n  }\n\n  __group__(control: any, container: any) {\n    const controlName = control?.properties?.controlName || '';\n    let group = makeSVGElement(\n      'g',\n      {\n        ...(controlName\n          ? {\n              class: `clickable-group`,\n              'data-group-id': controlName,\n            }\n          : {}),\n      },\n      container\n    );\n\n    control.children.controls.control\n      .sort((a: any, b: any) => {\n        return a.zOrder - b.zOrder;\n      })\n      .forEach((childControl: any) => {\n        childControl.x = parseInt(childControl.x, 10) + parseInt(control.x, 10);\n        childControl.y = parseInt(childControl.y, 10) + parseInt(control.y, 10);\n\n        this.render(childControl, group);\n      });\n  }\n}\n", "import { Renderer } from './renderer';\nimport { makeSVGElement } from './utils';\n\n/**\n * @param {Object} wireframe - Wireframe JSON\n * @param {Object} options - Config object\n * @param {number} [options.padding=5] - Padding for the SVG element\n * @param {string} [options.fontFamily=balsamiq]\n * @param {string} [options.fontURL=https://fonts.gstatic.com/s/balsamiqsans/v3/P5sEzZiAbNrN8SB3lQQX7Pncwd4XIA.woff2]\n * @returns {Promise} Resolves SVG element\n */\nexport async function wireframeJSONToSVG(\n  wireframe: any,\n  options: { padding?: number; fontFamily?: string; fontURL?: string } = {}\n) {\n  options = {\n    padding: 5,\n    fontFamily: 'balsamiq',\n    fontURL:\n      'https://fonts.gstatic.com/s/balsamiqsans/v3/P5sEzZiAbNrN8SB3lQQX7Pncwd4XIA.woff2', // fontURL: '/fonts/balsamiq.woff2',\n    ...options,\n  };\n\n  if (options.fontURL) {\n    let font = new FontFace(options.fontFamily!, `url(${options.fontURL})`);\n    await font.load();\n\n    if ((document.fonts as any).add) {\n      (document.fonts as any).add(font);\n    }\n  }\n\n  let mockup = wireframe.mockup;\n\n  let x = mockup.measuredW - mockup.mockupW - options.padding!;\n  let y = mockup.measuredH - mockup.mockupH - options.padding!;\n  let width = parseInt(mockup.mockupW) + options.padding! * 2;\n  let height = parseInt(mockup.mockupH) + options.padding! * 2;\n\n  let svgRoot = makeSVGElement('svg', {\n    xmlns: 'http://www.w3.org/2000/svg',\n    'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n    viewBox: `${x} ${y} ${width} ${height}`,\n    style: 'font-family: balsamiq',\n  });\n\n  let renderer = new Renderer(svgRoot, options.fontFamily!);\n\n  mockup.controls.control\n    .sort((a: any, b: any) => {\n      return a.zOrder - b.zOrder;\n    })\n    .forEach((control: any) => {\n      renderer.render(control, svgRoot);\n    });\n\n  return svgRoot;\n}\n"],
  "mappings": "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",
  "names": ["getRGBFromDecimalColor", "color", "red", "green", "blue", "makeSVGElement", "type", "attributes", "parent", "element", "prop", "DEFAULT_COLORS", "Renderer", "svgRoot", "fontFamily", "control", "container", "typeID", "defaultColor", "text", "font", "textColor", "align", "x", "y", "textMetrics", "textX", "textY", "textElement", "tspan", "str", "textPart", "index", "p0", "p1", "p2", "lineDash", "xVector", "radius", "controlName", "group", "a", "b", "childControl", "wireframeJSONToSVG", "wireframe", "options", "mockup", "width", "height", "renderer"]
}
